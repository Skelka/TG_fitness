// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª
let currentSection = 'workouts';

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    loadSection('workouts');
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–∞
function loadSection(sectionName) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[onclick="loadSection('${sectionName}')"]`).classList.add('active');

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —Ä–∞–∑–¥–µ–ª–∞
    const template = document.getElementById(`${sectionName}-template`);
    const content = document.getElementById('main-content');
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞
    const clone = template.content.cloneNode(true);
    
    // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    content.innerHTML = '';
    content.appendChild(clone);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
    switch(sectionName) {
        case 'workouts':
            loadWorkouts();
            break;
        case 'stats':
            loadStats();
            break;
        case 'tips':
            loadTips();
            break;
        case 'profile':
            loadProfile();
            break;
    }
    
    currentSection = sectionName;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async function loadWorkouts() {
    const workoutHistory = document.getElementById('workout-history');
    try {
        const response = await fetch(`/api/workouts/${tg.initDataUnsafe.user.id}`);
        const workouts = await response.json();
        
        workoutHistory.innerHTML = workouts.map(workout => `
            <div class="workout-item">
                <div class="card-title">${workout.workout_type}</div>
                <div class="card-subtitle">
                    ${new Date(workout.date).toLocaleDateString()} ‚Ä¢ ${workout.duration} –º–∏–Ω
                </div>
                <div>–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: ${workout.calories_burned}</div>
            </div>
        `).join('') || '<p>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö</p>';
    } catch (error) {
        workoutHistory.innerHTML = '<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</p>';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    const weightChart = document.getElementById('weight-chart');
    const workoutStats = document.getElementById('workout-stats');
    
    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Å–∞
        const weightResponse = await fetch(`/api/weight-history/${tg.initDataUnsafe.user.id}`);
        const weightData = await weightResponse.json();
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
        weightChart.innerHTML = `
            <h3>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞</h3>
            <div class="weight-list">
                ${weightData.map(entry => `
                    <div class="weight-item">
                        ${entry.weight} –∫–≥ ‚Ä¢ ${new Date(entry.date).toLocaleDateString()}
                    </div>
                `).join('')}
            </div>
        `;
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        const statsResponse = await fetch(`/api/workout-stats/${tg.initDataUnsafe.user.id}`);
        const stats = await statsResponse.json();
        
        workoutStats.innerHTML = `
            <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h3>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value">${stats.total_workouts}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">${stats.total_minutes}</div>
                    <div class="stat-label">–ú–∏–Ω—É—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">${stats.total_calories}</div>
                    <div class="stat-label">–ö–∞–ª–æ—Ä–∏–π —Å–æ–∂–∂–µ–Ω–æ</div>
                </div>
            </div>
        `;
    } catch (error) {
        weightChart.innerHTML = '<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤
async function loadTips() {
    const tipsContainer = document.getElementById('tips-container');
    try {
        const response = await fetch('/api/tips');
        const tips = await response.json();
        
        tipsContainer.innerHTML = tips.map(tip => `
            <div class="tip-card">
                <div class="tip-category">${tip.category}</div>
                <div class="card-title">${tip.title}</div>
                <div class="tip-content">${tip.content}</div>
            </div>
        `).join('');
    } catch (error) {
        tipsContainer.innerHTML = '<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–≤–µ—Ç–æ–≤</p>';
    }
}

// –í –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
async function sendDataToBot(data) {
    try {
        await tg.sendData(JSON.stringify(data));
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

// –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadProfile() {
    try {
        const success = await sendDataToBot({
            action: 'get_profile'
        });
        
        if (success) {
            tg.WebApp.onEvent('message', function(message) {
                try {
                    const profile = JSON.parse(message.text);
                    Object.keys(profile).forEach(key => {
                        const input = document.getElementById(key);
                        if (input) input.value = profile[key];
                    });
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', e);
                }
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

async function saveProfile(event) {
    event.preventDefault();
    
    const formData = {
        action: 'save_profile',
        profile: {
            name: document.getElementById('name').value,
            age: parseInt(document.getElementById('age').value),
            gender: document.getElementById('gender').value,
            height: parseFloat(document.getElementById('height').value),
            weight: parseFloat(document.getElementById('weight').value),
            goal: document.getElementById('goal').value
        }
    };

    const success = await sendDataToBot(formData);
    if (success) {
        tg.showAlert('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    } else {
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    }
}

// –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
function startNewWorkout() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const workoutTypes = [
        { id: 'cardio', name: '–ö–∞—Ä–¥–∏–æ', icon: 'üèÉ‚Äç‚ôÇÔ∏è' },
        { id: 'strength', name: '–°–∏–ª–æ–≤–∞—è', icon: 'üí™' },
        { id: 'flexibility', name: '–†–∞—Å—Ç—è–∂–∫–∞', icon: 'üßò‚Äç‚ôÇÔ∏è' }
    ];
    
    const content = document.getElementById('main-content');
    content.innerHTML = `
        <div class="section workout-selection">
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</h2>
            <div class="workout-types">
                ${workoutTypes.map(type => `
                    <button onclick="selectWorkout('${type.id}')" class="workout-type-btn">
                        <span class="workout-icon">${type.icon}</span>
                        <span class="workout-name">${type.name}</span>
                    </button>
                `).join('')}
            </div>
                </div>
    `;
} 