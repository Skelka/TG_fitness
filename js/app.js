// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª
let currentSection = 'workouts';

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    loadSection('workouts');
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–∞
function loadSection(sectionName) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[onclick="loadSection('${sectionName}')"]`).classList.add('active');

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —Ä–∞–∑–¥–µ–ª–∞
    const template = document.getElementById(`${sectionName}-template`);
    const content = document.getElementById('main-content');
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞
    const clone = template.content.cloneNode(true);
    
    // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    content.innerHTML = '';
    content.appendChild(clone);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
    switch(sectionName) {
        case 'workouts':
            loadWorkouts();
            break;
        case 'stats':
            loadStats();
            break;
        case 'tips':
            loadTips();
            break;
        case 'profile':
            loadProfile();
            break;
    }
    
    currentSection = sectionName;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async function loadWorkouts() {
    const workoutHistory = document.getElementById('workout-history');
    try {
        const success = await sendDataToBot({
            action: 'get_workouts'
        });
        
        if (success) {
            const messageHandler = function(message) {
                try {
                    const workouts = JSON.parse(message.text);
                    workoutHistory.innerHTML = workouts.map(workout => `
                        <div class="workout-item">
                            <div class="card-title">${workout.type}</div>
                            <div class="card-subtitle">
                                ${new Date(workout.date).toLocaleDateString()} ‚Ä¢ ${workout.duration} –º–∏–Ω
                            </div>
                            <div>–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: ${workout.calories_burned}</div>
                        </div>
                    `).join('') || '<p>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö</p>';
                    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    tg.WebApp.offEvent('message', messageHandler);
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', e);
                    workoutHistory.innerHTML = '<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</p>';
                }
            };
            
            tg.WebApp.onEvent('message', messageHandler);
        }
    } catch (error) {
        workoutHistory.innerHTML = '<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</p>';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    const weightChart = document.getElementById('weight-chart');
    const workoutStats = document.getElementById('workout-stats');
    
    try {
        const success = await sendDataToBot({
            action: 'get_weight_history'
        });
        
        if (success) {
            const messageHandler = function(message) {
                try {
                    const weightData = JSON.parse(message.text);
                    weightChart.innerHTML = `
                        <h3>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞</h3>
                        <div class="weight-list">
                            ${weightData.map(entry => `
                                <div class="weight-item">
                                    ${entry.weight} –∫–≥ ‚Ä¢ ${new Date(entry.date).toLocaleDateString()}
                                </div>
                            `).join('')}
                        </div>
                    `;
                    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    tg.WebApp.offEvent('message', messageHandler);
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –≤–µ—Å–∞:', e);
                }
            };
            
            tg.WebApp.onEvent('message', messageHandler);
        }
    } catch (error) {
        weightChart.innerHTML = '<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤
function loadTips() {
    const tipsContainer = document.getElementById('tips-container');
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
    const tips = [
        {
            category: "–ü–∏—Ç–∞–Ω–∏–µ",
            title: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫",
            content: "–ù–∞—á–∏–Ω–∞–π—Ç–µ –¥–µ–Ω—å —Å –±–µ–ª–∫–æ–≤–æ–π –ø–∏—â–∏ –∏ —Å–ª–æ–∂–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏."
        },
        {
            category: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            title: "–†–∞–∑–º–∏–Ω–∫–∞",
            content: "–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å 5-10 –º–∏–Ω—É—Ç–Ω–æ–π —Ä–∞–∑–º–∏–Ω–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ç—Ä–∞–≤–º."
        },
        {
            category: "–ú–æ—Ç–∏–≤–∞—Ü–∏—è",
            title: "–°—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏",
            content: "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ –æ—Ç–º–µ—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏."
        }
    ];
    
    tipsContainer.innerHTML = tips.map(tip => `
        <div class="tip-card">
            <div class="tip-category">${tip.category}</div>
            <div class="card-title">${tip.title}</div>
            <div class="tip-content">${tip.content}</div>
        </div>
    `).join('');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É
async function sendDataToBot(data) {
    try {
        await tg.sendData(JSON.stringify(data));
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
async function saveProfile(event) {
    event.preventDefault();
    
    const formData = {
        action: 'save_profile',
        profile: {
            name: document.getElementById('name').value,
            age: parseInt(document.getElementById('age').value),
            gender: document.getElementById('gender').value,
            height: parseFloat(document.getElementById('height').value),
            weight: parseFloat(document.getElementById('weight').value),
            goal: document.getElementById('goal').value
        }
    };

    const success = await sendDataToBot(formData);
    if (success) {
        tg.showAlert('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    } else {
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    }
}

// –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
function startNewWorkout() {
    const workoutTypes = [
        { id: 'cardio', name: '–ö–∞—Ä–¥–∏–æ', icon: 'üèÉ‚Äç‚ôÇÔ∏è' },
        { id: 'strength', name: '–°–∏–ª–æ–≤–∞—è', icon: 'üí™' },
        { id: 'flexibility', name: '–†–∞—Å—Ç—è–∂–∫–∞', icon: 'üßò‚Äç‚ôÇÔ∏è' }
    ];
    
    const content = document.getElementById('main-content');
    content.innerHTML = `
        <div class="section workout-selection">
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</h2>
            <div class="workout-types">
                ${workoutTypes.map(type => `
                    <button onclick="selectWorkout('${type.id}')" class="workout-type-btn">
                        <span class="workout-icon">${type.icon}</span>
                        <span class="workout-name">${type.name}</span>
                    </button>
                `).join('')}
            </div>
        </div>
    `;
}

async function loadProfile() {
    try {
        const success = await sendDataToBot({
            action: 'get_profile'
        });
        
        if (success) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            const messageHandler = function(message) {
                try {
                    const profile = JSON.parse(message.text);
                    Object.keys(profile).forEach(key => {
                        const input = document.getElementById(key);
                        if (input) input.value = profile[key];
                    });
                    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    tg.WebApp.offEvent('message', messageHandler);
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', e);
                }
            };
            
            tg.WebApp.onEvent('message', messageHandler);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
} 