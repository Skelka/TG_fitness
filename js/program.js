// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
import { getStorageItem, setStorageItem } from './storage.js';
import { showNotification, showError, showPopupSafe } from './ui.js';
import { getDifficultyText } from './utils.js';

export async function initializeProgram(program) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        const profileData = await getStorageItem('profile')
            .then(data => data ? JSON.parse(data) : null);

        if (!profileData) {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã');
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        const workouts = await generateWorkoutPlan(program, profileData);
        if (!workouts) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        const activeProgram = {
            ...program,
            startDate: Date.now(),
            workouts: workouts.map(w => ({
                ...w,
                completed: false,
                started: false
            }))
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        await setStorageItem('activeProgram', JSON.stringify(activeProgram));
        
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞:', activeProgram);
        
        return activeProgram;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
        throw error;
    }
}

export async function loadActiveProgram() {
    try {
        return await getStorageItem('activeProgram')
            .then(data => data ? JSON.parse(data) : null);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
        return null;
    }
}

export async function updateProgramProgress(workout, isCompleted) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = await getStorageItem('workoutStats')
            .then(data => data ? JSON.parse(data) : {
                totalWorkouts: 0,
                totalCalories: 0,
                totalMinutes: 0,
                completedWorkouts: []
            });

        if (isCompleted) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats.totalWorkouts++;
            stats.totalCalories += workout.calories;
            stats.totalMinutes += workout.duration;
            stats.completedWorkouts.push({
                date: Date.now(),
                programId: workout.programId,
                workout: workout
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await setStorageItem('workoutStats', JSON.stringify(stats));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            const activeProgram = await getStorageItem('activeProgram')
                .then(data => data ? JSON.parse(data) : null);

            if (activeProgram) {
                const allWorkouts = activeProgram.workouts.length;
                const completed = activeProgram.workouts.filter(w => w.completed).length;

                if (completed === allWorkouts) {
                    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    await showPopupSafe({
                        title: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ',
                        message: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!',
                        buttons: [{
                            type: 'default',
                            text: '–û—Ç–ª–∏—á–Ω–æ!'
                        }]
                    });

                    // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
                    await setStorageItem('activeProgram', '');
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
}

export async function showProgramDetails(program) {
    const resultsInfo = program.results
        .map(result => `‚úÖ ${result}`)
        .join('\n');

    await showPopupSafe({
        title: program.name,
        message: `${program.description}\n\n${program.workoutsPerWeek} —Ç—Ä/–Ω–µ–¥ ‚Ä¢ ${getDifficultyText(program.difficulty)}\n\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${program.duration} –Ω–µ–¥–µ–ª—å`,
        buttons: [
            {
                id: `start_program_${program.id}`,
                type: 'default',
                text: '–ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É'
            },
            {
                id: `schedule_${program.id}`,
                type: 'default',
                text: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
            }
        ]
    });
}

export async function showProgramSchedule(programId) {
    const program = window.programData[programId];
    if (!program) return;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    const scheduleMessage = formatScheduleMessage(program);

    await showPopupSafe({
        title: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
        message: scheduleMessage,
        buttons: [
            {
                type: 'default',
                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                id: `back_to_main_${programId}`
            },
            {
                type: 'default',
                text: '–ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É',
                id: `start_program_${programId}`
            }
        ]
    });
}

function formatScheduleMessage(program) {
    return `üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n` +
           `‚Ä¢ ${program.workoutsPerWeek} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é\n` +
           `‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${program.duration} –Ω–µ–¥–µ–ª—å\n\n` +
           `üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–Ω–∏:\n` +
           program.workouts.map((workout, index) => 
               `–î–µ–Ω—å ${index + 1}: ${workout.name} (${workout.duration} –º–∏–Ω)`
           ).join('\n');
}

async function generateWorkoutPlan(program, profile) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    // –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return program.workouts;
} 