// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
import { getStorageItem, setStorageItem } from './storage.js';
import { showNotification, showError, showPopupSafe } from './ui.js';
import { programs } from './data/programs.js';
import { getDifficultyText } from './utils.js';

export async function initializeProgram(programId) {
    try {
        const program = programs[programId];
        if (!program) {
            throw new Error('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
        await setStorageItem('activeProgram', JSON.stringify({
            id: program.id,
            title: program.title,
            workouts: program.workouts.map(w => ({
                ...w,
                completed: false
            }))
        }));

        showNotification('–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!');
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É');
        return false;
    }
}

export async function loadActiveProgram() {
    try {
        return await getStorageItem('activeProgram')
            .then(data => data ? JSON.parse(data) : null);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
        return null;
    }
}

export async function updateProgramProgress(workout, isCompleted) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = await getStorageItem('workoutStats')
            .then(data => data ? JSON.parse(data) : {
                totalWorkouts: 0,
                totalCalories: 0,
                totalMinutes: 0,
                completedWorkouts: []
            });

        if (isCompleted) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats.totalWorkouts++;
            stats.totalCalories += workout.calories;
            stats.totalMinutes += workout.duration;
            stats.completedWorkouts.push({
                date: Date.now(),
                programId: workout.programId,
                workout: workout
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await setStorageItem('workoutStats', JSON.stringify(stats));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            const activeProgram = await getStorageItem('activeProgram')
                .then(data => data ? JSON.parse(data) : null);

            if (activeProgram) {
                const allWorkouts = activeProgram.workouts.length;
                const completed = activeProgram.workouts.filter(w => w.completed).length;

                if (completed === allWorkouts) {
                    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    await showPopupSafe({
                        title: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ',
                        message: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!',
                        buttons: [{
                            type: 'default',
                            text: '–û—Ç–ª–∏—á–Ω–æ!'
                        }]
                    });

                    // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
                    await setStorageItem('activeProgram', '');
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
}

export async function showProgramDetails(programId) {
    try {
        const program = programs[programId];
        if (!program) throw new Error('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

        await showPopupSafe({
            title: program.title,
            message: `
                ${program.description}
                
                üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${program.duration}
                üèãÔ∏è‚Äç‚ôÇÔ∏è –ì—Ä–∞—Ñ–∏–∫: ${program.schedule}
                üí™ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${getDifficultyText(program.difficulty)}
                
                –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:
                ${program.workouts.slice(0, 3).map(w => `‚Ä¢ ${w.title}`).join('\n')}
                ${program.workouts.length > 3 ? '\n... –∏ –¥—Ä—É–≥–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' : ''}
            `,
            buttons: [
                {
                    id: `start_program_${program.id}`,
                    type: 'default',
                    text: '–ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É'
                },
                {
                    id: `schedule_${program.id}`,
                    type: 'default',
                    text: '–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'
                }
            ]
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    }
}

export async function showProgramSchedule(programId) {
    try {
        const program = programs[programId];
        if (!program) throw new Error('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

        await showPopupSafe({
            title: '–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            message: formatScheduleMessage(program),
            buttons: [
                {
                    id: `back_${program.id}`,
                    type: 'default',
                    text: '–ù–∞–∑–∞–¥'
                }
            ]
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫');
    }
}

function formatScheduleMessage(program) {
    return `üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n` +
           `‚Ä¢ ${program.schedule} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é\n` +
           `‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${program.duration}\n\n` +
           `üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–Ω–∏:\n` +
           program.workouts.map((workout, index) => 
               `–î–µ–Ω—å ${index + 1}: ${workout.title} (${workout.duration} –º–∏–Ω)`
           ).join('\n');
}

function getDifficultyText(difficulty) {
    switch(difficulty) {
        case 'low': return '–ù–∞—á–∞–ª—å–Ω—ã–π';
        case 'medium': return '–°—Ä–µ–¥–Ω–∏–π';
        case 'high': return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
        default: return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }
} 